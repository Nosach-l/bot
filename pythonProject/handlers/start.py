import asyncio

from aiogram import Router, F
from aiogram.filters import CommandStart, Command, CommandObject
from aiogram.fsm.context import FSMContext
from aiogram.types import Message
from aiogram.utils.chat_action import ChatActionSender
from aiogram.types import ReplyKeyboardRemove

from create_bot import questions, bot, admins
from filters.is_admin import IsAdmin
from keyboards.all_kb import main_kb, create_spec_kb, create_rat
from keyboards.inline_kbs import get_inline_kb, create_qst_inline_kb
from utils.utils import get_random_person
from aiogram.types import CallbackQuery


start_router = Router()


@start_router.message(CommandStart())
async def cmd_start(message: Message, command: CommandObject):
    command_args: str = command.args
    if command_args:
        await message.answer(
            f'–ó–∞–ø—É—Å–∫ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ –∫–æ–º–∞–Ω–¥–µ /start –∏—Å–ø–æ–ª—å–∑—É—è —Ñ–∏–ª—å—Ç—Ä CommandStart() —Å –º–µ—Ç–∫–æ–π <b>{command_args}</b>',
            reply_markup=main_kb(message.from_user.id))
    else:
        await message.answer(
            f'–ó–∞–ø—É—Å–∫ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ –∫–æ–º–∞–Ω–¥–µ /start –∏—Å–ø–æ–ª—å–∑—É—è —Ñ–∏–ª—å—Ç—Ä CommandStart() –±–µ–∑ –º–µ—Ç–∫–∏',
            reply_markup=main_kb(message.from_user.id))


@start_router.message(Command('start_2'))
async def cmd_start(message: Message):
    await message.answer('–ó–∞–ø—É—Å–∫ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ –∫–æ–º–∞–Ω–¥–µ /start_2 –∏—Å–ø–æ–ª—å–∑—É—è —Ñ–∏–ª—å—Ç—Ä Command()',
                         reply_markup=create_spec_kb())


@start_router.message(F.text == '/start_3')
async def cmd_start(message: Message):
    await message.answer('–ó–∞–ø—É—Å–∫ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ –∫–æ–º–∞–Ω–¥–µ /start_3 –∏—Å–ø–æ–ª—å–∑—É—è –º–∞–≥–∏—á–µ—Å–∫–∏–π —Ñ–∏–ª—å—Ç—Ä F.text!',
                         reply_markup=create_rat())


@start_router.message(F.text == '–î–∞–≤–∞–π –∏–Ω–ª–∞–π–Ω!')
async def get_inline_btn_link(message: Message):
    await message.answer('–í–æ—Ç —Ç–µ–±–µ –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–æ —Å—Å—ã–ª–∫–∞–º–∏!', reply_markup=get_inline_kb())


@start_router.callback_query(F.data == 'get_person')
async def send_random_person(call: CallbackQuery):
    await call.answer('–ì–µ–Ω–µ—Ä–∏—Ä—É—é —Å–ª—É—á–∞–π–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', show_alert=None)
    user = get_random_person()
    formatted_message = (
        f"üë§ <b>–ò–º—è:</b> {user['name']}\n"
        f"üè† <b>–ê–¥—Ä–µ—Å:</b> {user['address']}\n"
        f"üìß <b>Email:</b> {user['email']}\n"
        f"üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {user['phone_number']}\n"
        f"üéÇ <b>–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è:</b> {user['birth_date']}\n"
        f"üè¢ <b>–ö–æ–º–ø–∞–Ω–∏—è:</b> {user['company']}\n"
        f"üíº <b>–î–æ–ª–∂–Ω–æ—Å—Ç—å:</b> {user['job']}\n"
    )
    await call.message.answer(formatted_message)
    await call.message.edit_reply_markup(reply_markup=None)


@start_router.callback_query(F.data == 'back_home')
async def back_home(call: CallbackQuery):
    await call.message.answer('–ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –≥–ª–∞–≤–Ω—É—é', reply_markup=main_kb(call.from_user.id))
    await call.answer()


@start_router.message(Command('faq'))
async def cmd_start_2(message: Message):
    await message.answer('–°–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏',
                         reply_markup=create_qst_inline_kb(questions))


@start_router.callback_query(F.data.startswith('qst_'))
async def cmd_start(call: CallbackQuery):
    await call.answer()
    qst_id = int(call.data.replace('qst_', ''))
    qst_data = questions[qst_id]
    msg_text = f'–û—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å {qst_data.get("qst")}\n\n' \
               f'<b>{qst_data.get("answer")}</b>\n\n' \
               f'–í—ã–±–µ—Ä–∏ –¥—Ä—É–≥–æ–π –≤–æ–ø—Ä–æ—Å:'
    async with ChatActionSender(bot=bot, chat_id=call.from_user.id, action="typing"):
        await asyncio.sleep(1)
        await call.message.answer(msg_text, reply_markup=create_qst_inline_kb(questions))


@start_router.message(F.text.lower().contains('–æ—Ö–æ—Ç–Ω–∏–∫'))
async def cmd_start(message: Message, state: FSMContext):
    # –æ—Ç–ø—Ä–∞–≤–∫–∞ –æ–±—ã—á–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    await message.answer('–Ø –¥—É–º–∞—é, —á—Ç–æ —Ç—ã —Ç—É—Ç –ø—Ä–æ —Ä–∞–¥—É–≥—É —Ä–∞—Å—Å–∫–∞–∑—ã–≤–∞–µ—à—å')

    # —Ç–æ –∂–µ –¥–µ–π—Å—Ç–≤–∏–µ, –Ω–æ —á–µ—Ä–µ–∑ –æ–±—ä–µ–∫—Ç –±–æ—Ç–∞
    await bot.send_message(chat_id=message.from_user.id, text='–î–ª—è –º–µ–Ω—è —ç—Ç–æ —Å–ª–∏—à–∫–æ–º –ø—Ä–æ—Å—Ç–æ')

    # –æ—Ç–≤–µ—Ç —á–µ—Ä–µ–∑ —Ü–∏—Ç–∞—Ç—É
    msg = await message.reply('–ù—É –≤–æ—Ç —á—Ç–æ –∑–∞ –≥–ª—É–ø–æ—Å—Ç–∏!?')

    # –æ—Ç–≤–µ—Ç —á–µ—Ä–µ–∑ —Ü–∏—Ç–∞—Ç—É, —á–µ—Ä–µ–∑ –æ–±—ä–µ–∫—Ç bot
    await bot.send_message(chat_id=message.from_user.id, text='–•–æ—Ç—è, —ç—Ç–æ –∑–∞–±–∞–≤–Ω–æ...',
                           reply_to_message_id=msg.message_id)

    await bot.forward_message(chat_id=message.from_user.id, from_chat_id=message.from_user.id, message_id=msg.message_id)

    data_task = {'user_id': message.from_user.id, 'full_name': message.from_user.full_name,
                 'username': message.from_user.username, 'message_id': message.message_id, 'date': message.date}
    print(data_task)


@start_router.message(Command('test_edit_msg'))
async def cmd_start(message: Message, state: FSMContext):
    # –ë–æ—Ç –¥–µ–ª–∞–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –æ–±—ä–µ–∫—Ç–∞ msg
    msg = await message.answer('–û—Ç–ø—Ä–∞–≤–ª—è—é —Å–æ–æ–±—â–µ–Ω–∏–µ')

    # –î–æ—Å—Ç–∞–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è
    msg_id = msg.message_id

    # –ò–º–∏—Ç–∏—Ä—É–µ–º –Ω–∞–±–æ—Ä —Ç–µ–∫—Å—Ç–∞ 2 —Å–µ–∫—É–Ω–¥—ã –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ –í –∫–æ–¥–µ –æ—Å—Ç–∞–≤–ª–µ–Ω—ã –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏.
    # –ï–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–µ, –Ω–∞ —á—Ç–æ –Ω—É–∂–Ω–æ –æ–±—Ä–∞—Ç–∏—Ç—å –≤–Ω–∏–º–∞–Ω–∏–µ, ‚Äî —Å—Ç—Ä–æ–∫–∞:
    # –º –∫–∞–∫–æ–µ-—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
    async with ChatActionSender(bot=bot, chat_id=message.from_user.id, action="typing"):
        await asyncio.sleep(2)
        await message.answer('–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ')

    # –î–µ–ª–∞–µ–º –ø–∞—É–∑—É –µ—â—ë –Ω–∞ 2 —Å–µ–∫—É–Ω–¥—ã
    await asyncio.sleep(2)

    # –ò–∑–º–µ–Ω—è–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è, ID –∫–æ—Ç–æ—Ä–æ–≥–æ –º—ã —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏
    await bot.edit_message_text(text='<b>–û—Ç–ø—Ä–∞–≤–ª—è—é —Å–æ–æ–±—â–µ–Ω–∏–µ!!!</b>', chat_id=message.from_user.id, message_id=msg_id)


@start_router.message(F.text.lower().contains('–ø–æ–¥–ø–∏—Å—ã–≤–∞–π—Å—è'), IsAdmin(admins))
async def process_find_word(message: Message):
    await message.answer('–û, –∞–¥–º–∏–Ω, –∑–¥–∞—Ä–æ–≤–∞! –ê —Ç–µ–±–µ –º–æ–∂–Ω–æ –ø–∏—Å–∞—Ç—å –ø–æ–¥–ø–∏—Å—ã–≤–∞–π—Å—è.')


@start_router.message(F.text.lower().contains('–ø–æ–¥–ø–∏—Å—ã–≤–∞–π—Å—è'))
async def process_find_word(message: Message):
    await message.answer('–í —Ç–≤–æ–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –±—ã–ª–æ –Ω–∞–π–¥–µ–Ω–æ —Å–ª–æ–≤–æ "–ø–æ–¥–ø–∏—Å—ã–≤–∞–π—Å—è", –∞ —É –Ω–∞—Å —Ç–∞–∫–æ–µ –ø–∏—Å–∞—Ç—å –∑–∞–ø—Ä–µ—â–µ–Ω–æ!')
